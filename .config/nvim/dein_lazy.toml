#
# golang
# =============================================================================
[[plugins]]
repo = 'fatih/vim-go'
on_ft = ['go']
hook_add = '''
    autocmd FileType go nmap <leader>f <Plug>(go-format)
    autocmd FileType go nmap <leader>i <Plug>(go-imports)
    autocmd FileType go nmap <leader>b <Plug>(go-build)
    autocmd FileType go nmap <leader>r <Plug>(go-run)
    autocmd FileType go nmap <leader>d <Plug>(go-doc)
    autocmd FileType go nmap <leader>k <Plug>(go-def)
    let g:go_auto_type_info = 1
    let g:go_def_mode='gopls'
    let g:go_info_mode='gopls'

    " My neovim setup for Go
    " https://medium.com/hackernoon/my-neovim-setup-for-go-7f7b6e805876
    let g:go_auto_sameids = 1
    let g:go_highlight_build_constraints = 1
    let g:go_highlight_extra_types = 1
    let g:go_highlight_fields = 1
    let g:go_highlight_functions = 1
    let g:go_highlight_methods = 1
    let g:go_highlight_operators = 1
    let g:go_highlight_structs = 1
    let g:go_highlight_types = 1
'''

#
# markdown
# =============================================================================
[[plugins]]
repo = 'plasticboy/vim-markdown'
on_ft = ['markdown']
hook_add = '''
    let g:vim_markdown_folding_disabled=1
'''

[[plugins]]
repo = 'kannokanno/previm'
on_source = 'vim-markdown'
hook_add = '''
    let g:previm_enable_realtime = 1
'''

[[plugins]]
repo = 'tyru/open-browser.vim'
on_source = 'previm'

#
# Python
# =============================================================================

#[[plugins]]
#repo = 'davidhalter/jedi-vim'
#on_ft = ['python']

[[plugins]]
repo = 'deoplete-plugins/deoplete-jedi'
on_ft = ['python']

#
# Toml
# =============================================================================
[[plugins]]
repo = 'cespare/vim-toml'
on_ft = ['toml']

#
# Rust
# =============================================================================
[[plugins]]
repo = 'rust-lang/rust.vim'
on_ft = ['rust']
hook_add = '''
    let g:rustfmt_autosave = 1
    autocmd FileType rs nmap <leader>r <Plug>RustRun
'''

[[plugins]]
repo = 'Shougo/deoplete.nvim'
on_ft = ['rust']
hook_add = '''
    "let g:deoplete#enable_at_startup = 1
'''

[[plugins]]
repo = 'neoclide/coc.nvim'
rev = 'release'
on_ft = ['python', 'go', 'rust', 'typescript']
hook_add = '''
    set updatetime=300

    if has("patch-8.1.1564")
      " Recently vim can merge signcolumn and number column into one
      set signcolumn=number
    else
      set signcolumn=yes
    endif

    inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm()
                                  \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

    nmap <silent> gd <Plug>(coc-definition)
    nmap <silent> gy <Plug>(coc-type-definition)
    nmap <silent> gi <Plug>(coc-implementation)
    nmap <silent> gr <Plug>(coc-references)

    "function! s:check_back_space() abort
    "  let col = col('.') - 1
    "  return !col || getline('.')[col - 1]  =~# '\s'
    "endfunction
    "inoremap <silent><expr> <TAB>
    "      \ pumvisible() ? "\<C-n>" :
    "      \ <SID>check_back_space() ? "\<TAB>" :
    "      \ coc#refresh()
    "inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

    " Use <c-space> to trigger completion.
    inoremap <silent><expr> <C-space> coc#refresh()
    inoremap <silent><expr> <C-x><C-o> coc#refresh()

    let g:coc_global_extensions = ['coc-rust-analyzer']
'''
